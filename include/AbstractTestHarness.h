#pragma once

#include <string>
#include <memory>
#include "AbstractCodeParser.h"
#include "ProjectInformation.h"

/**
 * @brief Abstract Code Parser Class
 *
 */
template<typename T>
class AbstractTestHarness {
 public:
  virtual ~AbstractTestHarness() = default;
  virtual bool Ready() = 0;

  std::string Generate() const noexcept {
    return body_;
  }

 protected:
  AbstractTestHarness(const std::string &name, std::shared_ptr<T> p_parser)
    : name_(name)
    , notice_message_("This code was generated by "
      + std::string(PROJECT_NAME) + ' ' + std::string(PROJECT_SEMANTIC_VERSIONING))
    , p_parser_(p_parser) {}

  std::string name_;
  std::string notice_message_;
  std::shared_ptr<T> p_parser_;
  std::string body_;
};
